const Policy = require('../models/Policy'); // Assuming this is your Policy model
const sendEmail = require('./sendEmail');
const xlsx = require('xlsx');
const fs = require('fs');
const path = require('path');

// Function to get the renewal link based on the company
const getRenewalLink = (company) => {
    const links = {
        'STAR HEALTH': 'https://customer.starhealth.in/customerportal/instant-renewal',
        'TATA AIG': 'https://www.tataaig.com/renewal?lob=health&renewalHeader=yes',
        'NATIONAL INSURANCE': 'https://nicportal.nic.co.in/nicportal/online/home',
        'CARE HEALTH': 'https://www.careinsurance.com/rhicl/proposalcp/renew/index-care',
    };
    
    return links[company] || 'https://defaultcompany.com/renew'; // Fallback to a default link if the company is not recognized
};

const sendReminderEmail = (policy, daysDiff) => {
    const endDate = new Date(policy.endDate);
    const subject = `Policy Renewal Reminder: ${policy.policyNumber}`;
    const renewalLink = getRenewalLink(policy.company);

    const clientText = `Dear ${policy.clientName},

    This is a friendly reminder that your ${policy.company} (Policy No: ${policy.policyNumber}) is set to expire on ${endDate.toLocaleDateString()}. You have ${daysDiff} days left to renew your policy.
    
    To renew, simply click here: ${renewalLink} or reach out to your agent.
    
    Best regards,
    Khushi Finserv Team`;

    // Send email to the client
    sendEmail(policy.clientEmail, subject, clientText);

    const agentText = `Hi ${policy.agentName},

The policy for ${policy.clientName} (Policy No: ${policy.policyNumber}) from ${policy.company} is set to expire on ${endDate.toLocaleDateString()}. There are ${daysDiff} days left for renewal.

Please reach out to the client or ensure that the policy is renewed promptly. You can view more details or assist the client by clicking here: ${renewalLink}.

Best regards,
Khushi Finserv Team`;

    // Send email to the agent
    sendEmail(policy.agentEmail, subject, agentText);
};

// Function to create an Excel file for the admin report
const generateExcelReport = (policies) => {
    const data = policies.map(({ policy, daysDiff }) => ({
        'Client Name': policy.clientName,
        'Product Name': policy.productName,
        'Agent Name': policy.agentName,
        'Company': policy.company,
        'Policy Number': policy.policyNumber,
        'End Date': policy.endDate.toLocaleDateString(),
        'Days Remaining': daysDiff,
    }));

    const ws = xlsx.utils.json_to_sheet(data);
    const wb = xlsx.utils.book_new();
    xlsx.utils.book_append_sheet(wb, ws, 'Policies Expiring Soon');

    const filePath = path.join(__dirname, 'monthly_policy_report.xlsx');
    xlsx.writeFile(wb, filePath);
    return filePath;
};

const sendMonthlyAdminEmail = async (policies) => {
    const subject = `Monthly Policy Expiration Summary`;
    const filePath = generateExcelReport(policies);

    const adminText = `Hi Admin,\n\nPlease find attached the monthly report for policies expiring in the next month.\n\nBest regards,\nKhushi Finserv`;

    // Send email with the Excel file as an attachment
    sendEmail(
        process.env.ADMIN_EMAIL,
        subject,
        adminText,
        [
            {
                filename: 'monthly_policy_report.xlsx',
                path: filePath,
            },
        ]
    );

    // Clean up by deleting the file after sending
    fs.unlinkSync(filePath);
};

const checkPoliciesForNotifications = async () => {
    try {
        const today = new Date();
        today.setUTCHours(0, 0, 0, 0);
        
        // Fetch all policies from the database
        const policies = await Policy.find();
        
        // Store policies for the admin's monthly report with daysDiff
        const upcomingPolicies = [];
        const isFirstOfMonth = today.getDate() === 19; // Check if today is the 1st of the month

        policies.forEach(policy => {
            const endDate = new Date(policy.endDate);
            endDate.setUTCHours(0, 0, 0, 0);
            
            const timeDiff = endDate - today;
            const daysDiff = Math.floor(timeDiff / (1000 * 60 * 60 * 24)); // Convert milliseconds to days

            // Check if policy needs a notification (30, 15, 5, 1 days before expiration)
            const reminderDays = [30, 15, 5, 1]; 

            if (reminderDays.includes(daysDiff)) {
                sendReminderEmail(policy, daysDiff); // Reuse function to send the email
            }

            // Collect policies for the monthly report
            if (daysDiff > 0 && daysDiff <= 30) { // Policies expiring in the next 30 days
                upcomingPolicies.push({ policy, daysDiff });
            }
        });

        // Send the admin's monthly summary only if today is the 1st of the month
        if (isFirstOfMonth && upcomingPolicies.length > 0) {
            await sendMonthlyAdminEmail(upcomingPolicies);
        }
    } catch (error) {
        console.error('Error checking policies for notifications:', error);
    }
};

module.exports = checkPoliciesForNotifications;
